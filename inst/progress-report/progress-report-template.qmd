# Project Overview

## Package Name and Purpose

`irwpkg` is an R package extending the functionality of the existing [Item Response Warehouse (IRW)](https://datapages.github.io/irw/) package hosted [here](https://github.com/ben-domingue/irw). This project enhances the package’s versatility and usability, adding functions for efficient querying and processing of large-scale item response data directly in R, thereby streamlining workflows for researchers and analysts working with IRW datasets.

# Progress Summary

## Completed Work

### Mike Hardy (hardym)

-   reorganized rules for data governance (outside of scope of this project, but necessary for future development)

-   implemented functions related to cleaning and formatting data

    -   `irw_rename()`

    -   `irw_name_fix()`

    -   `reformat()`

    -   reformat is partially documented and while change as progress continues

-   Researched and documented various expected input formats from the following packages: `mirt`, `ltm`, `psych`, `sem`, `lavaan`, `mokken`, and `lme4.`

    -   variable `supported_funcs` contains the current list of this information
    -   variable `variable_roles` contains potential variable types to be used when constructing output dataframes formatting

-   wrote unit tests for `irw_rename()` and `irw_name_fix()`

### Hansol Lee (hansol)

-   redesigned code architecture

-   implemented functions related to accessing and querying the IRW database stored in Redivis

    -   `list_available_datasets()`

    -   `get_database_metadata()` and `get_table_metadata()`

    -   `filter_tables()`

    -   `fetch_data()` and `fetch_table()`

    -   `download_data()`

-   wrote README to include guide for authentication with Redivis, package installation and usage examples

-   added unit tests for `list_available_datasets()`

## Remaining Work

### Mike Hardy (hardym)

-   Week 9-10 (Nov 18 - 30)

    -   finish coding and documenting `reformat()`

    -   write more robust unit tests for `reformat()`

    -   Full functionality of `reformat()` is dependent on consistent inputs from the database and the `irw` package. This will require collaboration with Ben beyond the scope of this project to ensure that the package can handle all irw data formats. Additionally, `reformat()` will need to be updated as the project progresses in order to output increasingly more diverse package and function input types.

-   Thanksgiving Week (Nov 25 - Dev 1)

    -   add package specific unit tests
    -   add final documentation for functions

-   Week 10 (Dec 2 - 8)

    -   create vignettes for demos
    -   finish unit testing & final R CMD checks

### Hansol Lee (hansol)

-   Week 9 (Nov 18 - 24)
    -   extend `filter_table()` to include more criteria
        -   pre-compute metadata table for querying IRW database
            -   implement version control for different versions of IRW
    -   add error handling for Redivis API communication
-   Thanksgiving Week (Nov 25 - Dev 1)
    -   add unit tests
-   Week 10 (Dec 2 - 8)
    -   create vignettes for demos
    -   finish unit testing & final R CMD checks

# Issues and Solutions

## Technical Challenges

### Issue 1

-   **Problem**: Many instances of conflicting data types, poor data governance, and inconsistent naming conventions in the original IRW database make it difficult to implement functions that can handle a wide range of input data formats. This issue is exacerbated by the lack of consistency of the expected input formats for the functions in the `irw` package.
-   **Solution**:
    -   `irw_rename()` and `irw_name_fix()` functions can support the new standardization of variable names and formats across different datasets.
    -   \[outside of scope of this project\] Reorganizing the rules for data governance and creating a plan for backcoding and correcting currently extant datasets for the expected input formats for the functions in the `irw` package. This will help ensure that the package can handle a wide range of input data formats.
-   **Impact**:
    -   The new functions will help ensure that the package can handle a wide range of input data formats. This will make the package more versatile and user-friendly, but the larger project (outside of scope) of reorganizing the rules for data governance will be necessary for the package to be fully functional. That task will not likely be done in time for this project.

## Collaboration Challenges

-   **Challenge**: dealing with git merge conflict disaster with the upstream continuously being updated with stuff unrelated to package development and us being git newbies :(
-   **Resolution**:
    -   define a clear collaboration workflow upfront
    -   create a dedicated, clean repository for R package development (`irwpkg)`. Retain the original irw repo solely for preprocessing raw datasets for Redivis export.
-   **Preventive Measures**:
    -   to prevent merge conflicts,
        -   keep the main branch clean, work on feature branches for individual tasks and merge into the main branch only after a collaborative code review.

        -   assign distinct functionalities to each team member to prevent editing the same files

# Changes to Project Plan

## Scope Modifications

### Original Plan

1.  Write, test, document functions related to **querying** the IRW database
2.  Write, test, document functions related to **processing** the IRW datasets
3.  Create vignettes that showcase usage of the new functionality.
4.  Explore additional features:
    1.  Metadata curation / creation 
    2.  Develop prototypes to support alternative data sources

### Modified Plan

1.  Write, test, document functions related to **querying** the IRW database
2.  Write, test, document functions related to **processing** the IRW datasets
3.  Create vignettes that showcase usage of the new functionality.

### Reason for Change

Only modifications are the removal of the "potential/possible" additional features. The project is now focused on the core functionality of the package (basic querying and processing the IRW data), as the challenges with the current state of the IRW database have made it difficult to move quickly to more advanced features.

### Impact on Timeline

## Timeline Adjustments

### Updated Timeline

We document our updated timeline in the "Remaining Work" section above.

# Additional Notes

NA
